Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> function_definition
Rule 5     statement -> expression
Rule 6     statement -> instruction_or_function_call
Rule 7     function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE
Rule 8     expression -> NUMBER
Rule 9     expression -> STRING_LITERAL
Rule 10    expression -> CHAR_LITERAL
Rule 11    expression -> LBRACKET expression_list RBRACKET
Rule 12    expression_list -> expression_list COMMA expression
Rule 13    expression_list -> expression
Rule 14    instruction_or_function_call -> IDENTIFIER argument_list_optional
Rule 15    argument_list_optional -> argument_list
Rule 16    argument_list_optional -> empty
Rule 17    argument_list -> argument_list COMMA argument
Rule 18    argument_list -> argument
Rule 19    argument -> NUMBER
Rule 20    argument -> STRING_LITERAL
Rule 21    argument -> CHAR_LITERAL
Rule 22    argument -> IDENTIFIER
Rule 23    argument -> REGISTER
Rule 24    empty -> <empty>

Terminals, with rules where they appear

CHAR_LITERAL         : 10 21
COMMA                : 12 17
FUNC                 : 7
IDENTIFIER           : 7 14 22
LBRACE               : 7
LBRACKET             : 11
NUMBER               : 8 19
RBRACE               : 7
RBRACKET             : 11
REGISTER             : 23
STRING_LITERAL       : 9 20
error                : 

Nonterminals, with rules where they appear

argument             : 17 18
argument_list        : 15 17
argument_list_optional : 14
empty                : 16
expression           : 5 12 13
expression_list      : 11 12
function_definition  : 4
instruction_or_function_call : 6
program              : 0
statement            : 2 3
statement_list       : 1 2 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . function_definition
    (5) statement -> . expression
    (6) statement -> . instruction_or_function_call
    (7) function_definition -> . FUNC IDENTIFIER LBRACE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . function_definition
    (5) statement -> . expression
    (6) statement -> . instruction_or_function_call
    (7) function_definition -> . FUNC IDENTIFIER LBRACE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    $end            reduce using rule 1 (program -> statement_list .)
    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    statement                      shift and go to state 13
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 3

    (3) statement_list -> statement .

    FUNC            reduce using rule 3 (statement_list -> statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 3 (statement_list -> statement .)
    CHAR_LITERAL    reduce using rule 3 (statement_list -> statement .)
    LBRACKET        reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> function_definition .

    FUNC            reduce using rule 4 (statement -> function_definition .)
    NUMBER          reduce using rule 4 (statement -> function_definition .)
    STRING_LITERAL  reduce using rule 4 (statement -> function_definition .)
    CHAR_LITERAL    reduce using rule 4 (statement -> function_definition .)
    LBRACKET        reduce using rule 4 (statement -> function_definition .)
    IDENTIFIER      reduce using rule 4 (statement -> function_definition .)
    $end            reduce using rule 4 (statement -> function_definition .)
    RBRACE          reduce using rule 4 (statement -> function_definition .)


state 5

    (5) statement -> expression .

    FUNC            reduce using rule 5 (statement -> expression .)
    NUMBER          reduce using rule 5 (statement -> expression .)
    STRING_LITERAL  reduce using rule 5 (statement -> expression .)
    CHAR_LITERAL    reduce using rule 5 (statement -> expression .)
    LBRACKET        reduce using rule 5 (statement -> expression .)
    IDENTIFIER      reduce using rule 5 (statement -> expression .)
    $end            reduce using rule 5 (statement -> expression .)
    RBRACE          reduce using rule 5 (statement -> expression .)


state 6

    (6) statement -> instruction_or_function_call .

    FUNC            reduce using rule 6 (statement -> instruction_or_function_call .)
    NUMBER          reduce using rule 6 (statement -> instruction_or_function_call .)
    STRING_LITERAL  reduce using rule 6 (statement -> instruction_or_function_call .)
    CHAR_LITERAL    reduce using rule 6 (statement -> instruction_or_function_call .)
    LBRACKET        reduce using rule 6 (statement -> instruction_or_function_call .)
    IDENTIFIER      reduce using rule 6 (statement -> instruction_or_function_call .)
    $end            reduce using rule 6 (statement -> instruction_or_function_call .)
    RBRACE          reduce using rule 6 (statement -> instruction_or_function_call .)


state 7

    (7) function_definition -> FUNC . IDENTIFIER LBRACE statement_list RBRACE

    IDENTIFIER      shift and go to state 14


state 8

    (14) instruction_or_function_call -> IDENTIFIER . argument_list_optional
    (15) argument_list_optional -> . argument_list
    (16) argument_list_optional -> . empty
    (17) argument_list -> . argument_list COMMA argument
    (18) argument_list -> . argument
    (24) empty -> .
    (19) argument -> . NUMBER
    (20) argument -> . STRING_LITERAL
    (21) argument -> . CHAR_LITERAL
    (22) argument -> . IDENTIFIER
    (23) argument -> . REGISTER

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for CHAR_LITERAL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    FUNC            reduce using rule 24 (empty -> .)
    LBRACKET        reduce using rule 24 (empty -> .)
    $end            reduce using rule 24 (empty -> .)
    RBRACE          reduce using rule 24 (empty -> .)
    NUMBER          shift and go to state 20
    STRING_LITERAL  shift and go to state 21
    CHAR_LITERAL    shift and go to state 22
    IDENTIFIER      shift and go to state 15
    REGISTER        shift and go to state 23

  ! NUMBER          [ reduce using rule 24 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 24 (empty -> .) ]
  ! CHAR_LITERAL    [ reduce using rule 24 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 24 (empty -> .) ]

    argument_list_optional         shift and go to state 16
    argument_list                  shift and go to state 17
    empty                          shift and go to state 18
    argument                       shift and go to state 19

state 9

    (8) expression -> NUMBER .

    FUNC            reduce using rule 8 (expression -> NUMBER .)
    NUMBER          reduce using rule 8 (expression -> NUMBER .)
    STRING_LITERAL  reduce using rule 8 (expression -> NUMBER .)
    CHAR_LITERAL    reduce using rule 8 (expression -> NUMBER .)
    LBRACKET        reduce using rule 8 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 8 (expression -> NUMBER .)
    $end            reduce using rule 8 (expression -> NUMBER .)
    RBRACKET        reduce using rule 8 (expression -> NUMBER .)
    COMMA           reduce using rule 8 (expression -> NUMBER .)
    RBRACE          reduce using rule 8 (expression -> NUMBER .)


state 10

    (9) expression -> STRING_LITERAL .

    FUNC            reduce using rule 9 (expression -> STRING_LITERAL .)
    NUMBER          reduce using rule 9 (expression -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 9 (expression -> STRING_LITERAL .)
    CHAR_LITERAL    reduce using rule 9 (expression -> STRING_LITERAL .)
    LBRACKET        reduce using rule 9 (expression -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 9 (expression -> STRING_LITERAL .)
    $end            reduce using rule 9 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 9 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 9 (expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 9 (expression -> STRING_LITERAL .)


state 11

    (10) expression -> CHAR_LITERAL .

    FUNC            reduce using rule 10 (expression -> CHAR_LITERAL .)
    NUMBER          reduce using rule 10 (expression -> CHAR_LITERAL .)
    STRING_LITERAL  reduce using rule 10 (expression -> CHAR_LITERAL .)
    CHAR_LITERAL    reduce using rule 10 (expression -> CHAR_LITERAL .)
    LBRACKET        reduce using rule 10 (expression -> CHAR_LITERAL .)
    IDENTIFIER      reduce using rule 10 (expression -> CHAR_LITERAL .)
    $end            reduce using rule 10 (expression -> CHAR_LITERAL .)
    RBRACKET        reduce using rule 10 (expression -> CHAR_LITERAL .)
    COMMA           reduce using rule 10 (expression -> CHAR_LITERAL .)
    RBRACE          reduce using rule 10 (expression -> CHAR_LITERAL .)


state 12

    (11) expression -> LBRACKET . expression_list RBRACKET
    (12) expression_list -> . expression_list COMMA expression
    (13) expression_list -> . expression
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET

    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12

    expression_list                shift and go to state 24
    expression                     shift and go to state 25

state 13

    (2) statement_list -> statement_list statement .

    FUNC            reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 2 (statement_list -> statement_list statement .)
    CHAR_LITERAL    reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 14

    (7) function_definition -> FUNC IDENTIFIER . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 26


state 15

    (22) argument -> IDENTIFIER .

    COMMA           reduce using rule 22 (argument -> IDENTIFIER .)
    FUNC            reduce using rule 22 (argument -> IDENTIFIER .)
    NUMBER          reduce using rule 22 (argument -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 22 (argument -> IDENTIFIER .)
    CHAR_LITERAL    reduce using rule 22 (argument -> IDENTIFIER .)
    LBRACKET        reduce using rule 22 (argument -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 22 (argument -> IDENTIFIER .)
    $end            reduce using rule 22 (argument -> IDENTIFIER .)
    RBRACE          reduce using rule 22 (argument -> IDENTIFIER .)


state 16

    (14) instruction_or_function_call -> IDENTIFIER argument_list_optional .

    FUNC            reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)
    NUMBER          reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)
    STRING_LITERAL  reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)
    CHAR_LITERAL    reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)
    LBRACKET        reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)
    IDENTIFIER      reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)
    $end            reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)
    RBRACE          reduce using rule 14 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)


state 17

    (15) argument_list_optional -> argument_list .
    (17) argument_list -> argument_list . COMMA argument

    FUNC            reduce using rule 15 (argument_list_optional -> argument_list .)
    NUMBER          reduce using rule 15 (argument_list_optional -> argument_list .)
    STRING_LITERAL  reduce using rule 15 (argument_list_optional -> argument_list .)
    CHAR_LITERAL    reduce using rule 15 (argument_list_optional -> argument_list .)
    LBRACKET        reduce using rule 15 (argument_list_optional -> argument_list .)
    IDENTIFIER      reduce using rule 15 (argument_list_optional -> argument_list .)
    $end            reduce using rule 15 (argument_list_optional -> argument_list .)
    RBRACE          reduce using rule 15 (argument_list_optional -> argument_list .)
    COMMA           shift and go to state 27


state 18

    (16) argument_list_optional -> empty .

    FUNC            reduce using rule 16 (argument_list_optional -> empty .)
    NUMBER          reduce using rule 16 (argument_list_optional -> empty .)
    STRING_LITERAL  reduce using rule 16 (argument_list_optional -> empty .)
    CHAR_LITERAL    reduce using rule 16 (argument_list_optional -> empty .)
    LBRACKET        reduce using rule 16 (argument_list_optional -> empty .)
    IDENTIFIER      reduce using rule 16 (argument_list_optional -> empty .)
    $end            reduce using rule 16 (argument_list_optional -> empty .)
    RBRACE          reduce using rule 16 (argument_list_optional -> empty .)


state 19

    (18) argument_list -> argument .

    COMMA           reduce using rule 18 (argument_list -> argument .)
    FUNC            reduce using rule 18 (argument_list -> argument .)
    NUMBER          reduce using rule 18 (argument_list -> argument .)
    STRING_LITERAL  reduce using rule 18 (argument_list -> argument .)
    CHAR_LITERAL    reduce using rule 18 (argument_list -> argument .)
    LBRACKET        reduce using rule 18 (argument_list -> argument .)
    IDENTIFIER      reduce using rule 18 (argument_list -> argument .)
    $end            reduce using rule 18 (argument_list -> argument .)
    RBRACE          reduce using rule 18 (argument_list -> argument .)


state 20

    (19) argument -> NUMBER .

    COMMA           reduce using rule 19 (argument -> NUMBER .)
    FUNC            reduce using rule 19 (argument -> NUMBER .)
    NUMBER          reduce using rule 19 (argument -> NUMBER .)
    STRING_LITERAL  reduce using rule 19 (argument -> NUMBER .)
    CHAR_LITERAL    reduce using rule 19 (argument -> NUMBER .)
    LBRACKET        reduce using rule 19 (argument -> NUMBER .)
    IDENTIFIER      reduce using rule 19 (argument -> NUMBER .)
    $end            reduce using rule 19 (argument -> NUMBER .)
    RBRACE          reduce using rule 19 (argument -> NUMBER .)


state 21

    (20) argument -> STRING_LITERAL .

    COMMA           reduce using rule 20 (argument -> STRING_LITERAL .)
    FUNC            reduce using rule 20 (argument -> STRING_LITERAL .)
    NUMBER          reduce using rule 20 (argument -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 20 (argument -> STRING_LITERAL .)
    CHAR_LITERAL    reduce using rule 20 (argument -> STRING_LITERAL .)
    LBRACKET        reduce using rule 20 (argument -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 20 (argument -> STRING_LITERAL .)
    $end            reduce using rule 20 (argument -> STRING_LITERAL .)
    RBRACE          reduce using rule 20 (argument -> STRING_LITERAL .)


state 22

    (21) argument -> CHAR_LITERAL .

    COMMA           reduce using rule 21 (argument -> CHAR_LITERAL .)
    FUNC            reduce using rule 21 (argument -> CHAR_LITERAL .)
    NUMBER          reduce using rule 21 (argument -> CHAR_LITERAL .)
    STRING_LITERAL  reduce using rule 21 (argument -> CHAR_LITERAL .)
    CHAR_LITERAL    reduce using rule 21 (argument -> CHAR_LITERAL .)
    LBRACKET        reduce using rule 21 (argument -> CHAR_LITERAL .)
    IDENTIFIER      reduce using rule 21 (argument -> CHAR_LITERAL .)
    $end            reduce using rule 21 (argument -> CHAR_LITERAL .)
    RBRACE          reduce using rule 21 (argument -> CHAR_LITERAL .)


state 23

    (23) argument -> REGISTER .

    COMMA           reduce using rule 23 (argument -> REGISTER .)
    FUNC            reduce using rule 23 (argument -> REGISTER .)
    NUMBER          reduce using rule 23 (argument -> REGISTER .)
    STRING_LITERAL  reduce using rule 23 (argument -> REGISTER .)
    CHAR_LITERAL    reduce using rule 23 (argument -> REGISTER .)
    LBRACKET        reduce using rule 23 (argument -> REGISTER .)
    IDENTIFIER      reduce using rule 23 (argument -> REGISTER .)
    $end            reduce using rule 23 (argument -> REGISTER .)
    RBRACE          reduce using rule 23 (argument -> REGISTER .)


state 24

    (11) expression -> LBRACKET expression_list . RBRACKET
    (12) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 28
    COMMA           shift and go to state 29


state 25

    (13) expression_list -> expression .

    RBRACKET        reduce using rule 13 (expression_list -> expression .)
    COMMA           reduce using rule 13 (expression_list -> expression .)


state 26

    (7) function_definition -> FUNC IDENTIFIER LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . function_definition
    (5) statement -> . expression
    (6) statement -> . instruction_or_function_call
    (7) function_definition -> . FUNC IDENTIFIER LBRACE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    statement_list                 shift and go to state 30
    statement                      shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 27

    (17) argument_list -> argument_list COMMA . argument
    (19) argument -> . NUMBER
    (20) argument -> . STRING_LITERAL
    (21) argument -> . CHAR_LITERAL
    (22) argument -> . IDENTIFIER
    (23) argument -> . REGISTER

    NUMBER          shift and go to state 20
    STRING_LITERAL  shift and go to state 21
    CHAR_LITERAL    shift and go to state 22
    IDENTIFIER      shift and go to state 15
    REGISTER        shift and go to state 23

    argument                       shift and go to state 31

state 28

    (11) expression -> LBRACKET expression_list RBRACKET .

    FUNC            reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    NUMBER          reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    STRING_LITERAL  reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    CHAR_LITERAL    reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    IDENTIFIER      reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    $end            reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    RBRACE          reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)


state 29

    (12) expression_list -> expression_list COMMA . expression
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET

    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12

    expression                     shift and go to state 32

state 30

    (7) function_definition -> FUNC IDENTIFIER LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . function_definition
    (5) statement -> . expression
    (6) statement -> . instruction_or_function_call
    (7) function_definition -> . FUNC IDENTIFIER LBRACE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    RBRACE          shift and go to state 33
    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    statement                      shift and go to state 13
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 31

    (17) argument_list -> argument_list COMMA argument .

    COMMA           reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    FUNC            reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    NUMBER          reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    STRING_LITERAL  reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    CHAR_LITERAL    reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    LBRACKET        reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    IDENTIFIER      reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    $end            reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    RBRACE          reduce using rule 17 (argument_list -> argument_list COMMA argument .)


state 32

    (12) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 12 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 12 (expression_list -> expression_list COMMA expression .)


state 33

    (7) function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .

    FUNC            reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)
    STRING_LITERAL  reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)
    CHAR_LITERAL    reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)
    $end            reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 8 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 8 resolved as shift
WARNING: shift/reduce conflict for CHAR_LITERAL in state 8 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 8 resolved as shift
