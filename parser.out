Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> function_definition NEWLINE
Rule 5     statement -> expression NEWLINE
Rule 6     statement -> instruction_or_function_call NEWLINE
Rule 7     function_definition -> FUNC IDENTIFIER LBRACE NEWLINE statement_list RBRACE
Rule 8     expression -> NUMBER
Rule 9     expression -> STRING_LITERAL
Rule 10    expression -> CHAR_LITERAL
Rule 11    expression -> LBRACKET expression_list RBRACKET
Rule 12    expression_list -> expression_list COMMA expression
Rule 13    expression_list -> expression
Rule 14    instruction_or_function_call -> IDENTIFIER
Rule 15    instruction_or_function_call -> IDENTIFIER argument_list_optional
Rule 16    argument_list_optional -> argument_list
Rule 17    argument_list -> argument_list COMMA argument
Rule 18    argument_list -> argument
Rule 19    argument -> NUMBER
Rule 20    argument -> STRING_LITERAL
Rule 21    argument -> CHAR_LITERAL
Rule 22    argument -> IDENTIFIER
Rule 23    argument -> REGISTER

Terminals, with rules where they appear

CHAR_LITERAL         : 10 21
COMMA                : 12 17
FUNC                 : 7
IDENTIFIER           : 7 14 15 22
LBRACE               : 7
LBRACKET             : 11
NEWLINE              : 4 5 6 7
NUMBER               : 8 19
RBRACE               : 7
RBRACKET             : 11
REGISTER             : 23
STRING_LITERAL       : 9 20
error                : 

Nonterminals, with rules where they appear

argument             : 17 18
argument_list        : 16 17
argument_list_optional : 15
expression           : 5 12 13
expression_list      : 11 12
function_definition  : 4
instruction_or_function_call : 6
program              : 0
statement            : 2 3
statement_list       : 1 2 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . function_definition NEWLINE
    (5) statement -> . expression NEWLINE
    (6) statement -> . instruction_or_function_call NEWLINE
    (7) function_definition -> . FUNC IDENTIFIER LBRACE NEWLINE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER
    (15) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . function_definition NEWLINE
    (5) statement -> . expression NEWLINE
    (6) statement -> . instruction_or_function_call NEWLINE
    (7) function_definition -> . FUNC IDENTIFIER LBRACE NEWLINE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER
    (15) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    $end            reduce using rule 1 (program -> statement_list .)
    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    statement                      shift and go to state 13
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 3

    (3) statement_list -> statement .

    FUNC            reduce using rule 3 (statement_list -> statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 3 (statement_list -> statement .)
    CHAR_LITERAL    reduce using rule 3 (statement_list -> statement .)
    LBRACKET        reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> function_definition . NEWLINE

    NEWLINE         shift and go to state 14


state 5

    (5) statement -> expression . NEWLINE

    NEWLINE         shift and go to state 15


state 6

    (6) statement -> instruction_or_function_call . NEWLINE

    NEWLINE         shift and go to state 16


state 7

    (7) function_definition -> FUNC . IDENTIFIER LBRACE NEWLINE statement_list RBRACE

    IDENTIFIER      shift and go to state 17


state 8

    (14) instruction_or_function_call -> IDENTIFIER .
    (15) instruction_or_function_call -> IDENTIFIER . argument_list_optional
    (16) argument_list_optional -> . argument_list
    (17) argument_list -> . argument_list COMMA argument
    (18) argument_list -> . argument
    (19) argument -> . NUMBER
    (20) argument -> . STRING_LITERAL
    (21) argument -> . CHAR_LITERAL
    (22) argument -> . IDENTIFIER
    (23) argument -> . REGISTER

    NEWLINE         reduce using rule 14 (instruction_or_function_call -> IDENTIFIER .)
    NUMBER          shift and go to state 22
    STRING_LITERAL  shift and go to state 23
    CHAR_LITERAL    shift and go to state 24
    IDENTIFIER      shift and go to state 18
    REGISTER        shift and go to state 25

    argument_list_optional         shift and go to state 19
    argument_list                  shift and go to state 20
    argument                       shift and go to state 21

state 9

    (8) expression -> NUMBER .

    NEWLINE         reduce using rule 8 (expression -> NUMBER .)
    RBRACKET        reduce using rule 8 (expression -> NUMBER .)
    COMMA           reduce using rule 8 (expression -> NUMBER .)


state 10

    (9) expression -> STRING_LITERAL .

    NEWLINE         reduce using rule 9 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 9 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 9 (expression -> STRING_LITERAL .)


state 11

    (10) expression -> CHAR_LITERAL .

    NEWLINE         reduce using rule 10 (expression -> CHAR_LITERAL .)
    RBRACKET        reduce using rule 10 (expression -> CHAR_LITERAL .)
    COMMA           reduce using rule 10 (expression -> CHAR_LITERAL .)


state 12

    (11) expression -> LBRACKET . expression_list RBRACKET
    (12) expression_list -> . expression_list COMMA expression
    (13) expression_list -> . expression
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET

    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12

    expression_list                shift and go to state 26
    expression                     shift and go to state 27

state 13

    (2) statement_list -> statement_list statement .

    FUNC            reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 2 (statement_list -> statement_list statement .)
    CHAR_LITERAL    reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 14

    (4) statement -> function_definition NEWLINE .

    FUNC            reduce using rule 4 (statement -> function_definition NEWLINE .)
    NUMBER          reduce using rule 4 (statement -> function_definition NEWLINE .)
    STRING_LITERAL  reduce using rule 4 (statement -> function_definition NEWLINE .)
    CHAR_LITERAL    reduce using rule 4 (statement -> function_definition NEWLINE .)
    LBRACKET        reduce using rule 4 (statement -> function_definition NEWLINE .)
    IDENTIFIER      reduce using rule 4 (statement -> function_definition NEWLINE .)
    $end            reduce using rule 4 (statement -> function_definition NEWLINE .)
    RBRACE          reduce using rule 4 (statement -> function_definition NEWLINE .)


state 15

    (5) statement -> expression NEWLINE .

    FUNC            reduce using rule 5 (statement -> expression NEWLINE .)
    NUMBER          reduce using rule 5 (statement -> expression NEWLINE .)
    STRING_LITERAL  reduce using rule 5 (statement -> expression NEWLINE .)
    CHAR_LITERAL    reduce using rule 5 (statement -> expression NEWLINE .)
    LBRACKET        reduce using rule 5 (statement -> expression NEWLINE .)
    IDENTIFIER      reduce using rule 5 (statement -> expression NEWLINE .)
    $end            reduce using rule 5 (statement -> expression NEWLINE .)
    RBRACE          reduce using rule 5 (statement -> expression NEWLINE .)


state 16

    (6) statement -> instruction_or_function_call NEWLINE .

    FUNC            reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)
    NUMBER          reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)
    STRING_LITERAL  reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)
    CHAR_LITERAL    reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)
    LBRACKET        reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)
    IDENTIFIER      reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)
    $end            reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)
    RBRACE          reduce using rule 6 (statement -> instruction_or_function_call NEWLINE .)


state 17

    (7) function_definition -> FUNC IDENTIFIER . LBRACE NEWLINE statement_list RBRACE

    LBRACE          shift and go to state 28


state 18

    (22) argument -> IDENTIFIER .

    COMMA           reduce using rule 22 (argument -> IDENTIFIER .)
    NEWLINE         reduce using rule 22 (argument -> IDENTIFIER .)


state 19

    (15) instruction_or_function_call -> IDENTIFIER argument_list_optional .

    NEWLINE         reduce using rule 15 (instruction_or_function_call -> IDENTIFIER argument_list_optional .)


state 20

    (16) argument_list_optional -> argument_list .
    (17) argument_list -> argument_list . COMMA argument

    NEWLINE         reduce using rule 16 (argument_list_optional -> argument_list .)
    COMMA           shift and go to state 29


state 21

    (18) argument_list -> argument .

    COMMA           reduce using rule 18 (argument_list -> argument .)
    NEWLINE         reduce using rule 18 (argument_list -> argument .)


state 22

    (19) argument -> NUMBER .

    COMMA           reduce using rule 19 (argument -> NUMBER .)
    NEWLINE         reduce using rule 19 (argument -> NUMBER .)


state 23

    (20) argument -> STRING_LITERAL .

    COMMA           reduce using rule 20 (argument -> STRING_LITERAL .)
    NEWLINE         reduce using rule 20 (argument -> STRING_LITERAL .)


state 24

    (21) argument -> CHAR_LITERAL .

    COMMA           reduce using rule 21 (argument -> CHAR_LITERAL .)
    NEWLINE         reduce using rule 21 (argument -> CHAR_LITERAL .)


state 25

    (23) argument -> REGISTER .

    COMMA           reduce using rule 23 (argument -> REGISTER .)
    NEWLINE         reduce using rule 23 (argument -> REGISTER .)


state 26

    (11) expression -> LBRACKET expression_list . RBRACKET
    (12) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 30
    COMMA           shift and go to state 31


state 27

    (13) expression_list -> expression .

    RBRACKET        reduce using rule 13 (expression_list -> expression .)
    COMMA           reduce using rule 13 (expression_list -> expression .)


state 28

    (7) function_definition -> FUNC IDENTIFIER LBRACE . NEWLINE statement_list RBRACE

    NEWLINE         shift and go to state 32


state 29

    (17) argument_list -> argument_list COMMA . argument
    (19) argument -> . NUMBER
    (20) argument -> . STRING_LITERAL
    (21) argument -> . CHAR_LITERAL
    (22) argument -> . IDENTIFIER
    (23) argument -> . REGISTER

    NUMBER          shift and go to state 22
    STRING_LITERAL  shift and go to state 23
    CHAR_LITERAL    shift and go to state 24
    IDENTIFIER      shift and go to state 18
    REGISTER        shift and go to state 25

    argument                       shift and go to state 33

state 30

    (11) expression -> LBRACKET expression_list RBRACKET .

    NEWLINE         reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 11 (expression -> LBRACKET expression_list RBRACKET .)


state 31

    (12) expression_list -> expression_list COMMA . expression
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET

    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12

    expression                     shift and go to state 34

state 32

    (7) function_definition -> FUNC IDENTIFIER LBRACE NEWLINE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . function_definition NEWLINE
    (5) statement -> . expression NEWLINE
    (6) statement -> . instruction_or_function_call NEWLINE
    (7) function_definition -> . FUNC IDENTIFIER LBRACE NEWLINE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER
    (15) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    statement_list                 shift and go to state 35
    statement                      shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 33

    (17) argument_list -> argument_list COMMA argument .

    COMMA           reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    NEWLINE         reduce using rule 17 (argument_list -> argument_list COMMA argument .)


state 34

    (12) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 12 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 12 (expression_list -> expression_list COMMA expression .)


state 35

    (7) function_definition -> FUNC IDENTIFIER LBRACE NEWLINE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . function_definition NEWLINE
    (5) statement -> . expression NEWLINE
    (6) statement -> . instruction_or_function_call NEWLINE
    (7) function_definition -> . FUNC IDENTIFIER LBRACE NEWLINE statement_list RBRACE
    (8) expression -> . NUMBER
    (9) expression -> . STRING_LITERAL
    (10) expression -> . CHAR_LITERAL
    (11) expression -> . LBRACKET expression_list RBRACKET
    (14) instruction_or_function_call -> . IDENTIFIER
    (15) instruction_or_function_call -> . IDENTIFIER argument_list_optional

    RBRACE          shift and go to state 36
    FUNC            shift and go to state 7
    NUMBER          shift and go to state 9
    STRING_LITERAL  shift and go to state 10
    CHAR_LITERAL    shift and go to state 11
    LBRACKET        shift and go to state 12
    IDENTIFIER      shift and go to state 8

    statement                      shift and go to state 13
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    instruction_or_function_call   shift and go to state 6

state 36

    (7) function_definition -> FUNC IDENTIFIER LBRACE NEWLINE statement_list RBRACE .

    NEWLINE         reduce using rule 7 (function_definition -> FUNC IDENTIFIER LBRACE NEWLINE statement_list RBRACE .)

